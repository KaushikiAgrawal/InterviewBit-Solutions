Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * 
 * @Output head pointer of list.
 */
 
listnode* swapPairs(listnode* A) {
    int i=0,c=0;
    listnode *temp=A,*prev;
    while(temp!=NULL)
    {
        c++;
        temp=temp->next;
    }
    if(c==1)
        return A;
    temp=A;
    
    do
    {
        i++;
        if(i==1)
        {
            A=temp->next;
            prev=temp->next;
            temp->next=prev->next;
            prev->next=temp;
            prev=temp;
            temp=temp->next;
        }
        else
        {
            prev->next=temp->next;
            temp->next=temp->next->next;
            prev->next->next=temp;
            prev=temp;
            temp=temp->next;
        }
        
    }while(prev->next!=NULL && i<c/2);
    return A;
}
